name: 'Demo 4: State Management'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - deploy
        - destroy
      resource_group_name:
        description: 'Resource Group Name'
        required: false
        default: 'rg-mms-demo4-state'
        type: string

env:
  TF_VERSION: '1.5.0'
  WORKING_DIRECTORY: './demo4-state-management'

jobs:
  terraform:
    name: 'Demo 4 - State Management'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        # Check if we need to bootstrap (first time deployment)
        # Try to initialize with remote backend first, fall back to local if storage doesn't exist
        echo "Attempting to initialize with remote backend..."
        
        if terraform init; then
          echo "Successfully initialized with remote backend"
          echo "BACKEND_TYPE=remote" >> $GITHUB_ENV
        else
          echo "Remote backend not available, initializing for bootstrap..."
          # Remove backend configuration temporarily for bootstrap
          cp main.tf main.tf.backup
          sed '/backend "azurerm"/,/}/d' main.tf.backup > main.tf
          terraform init
          echo "BACKEND_TYPE=local" >> $GITHUB_ENV
          echo "This is a bootstrap run - will create storage account and migrate to remote state"
        fi

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: |
        terraform plan \
          -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" \
          -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'deploy'
      run: |
        terraform apply -auto-approve \
          -var="resource_group_name=${{ github.event.inputs.resource_group_name }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -auto-approve \
          -var="resource_group_name=${{ github.event.inputs.resource_group_name }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Display State Information
      if: github.event.inputs.action == 'deploy'
      run: |
        echo "## Demo 4 Deployment Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Resources Created:" >> $GITHUB_STEP_SUMMARY
        echo "- Resource Group (for state storage)" >> $GITHUB_STEP_SUMMARY
        echo "- Storage Account (remote state backend)" >> $GITHUB_STEP_SUMMARY
        echo "- Storage Container (state file storage)" >> $GITHUB_STEP_SUMMARY
        echo "- Network Security Group (drift demo target)" >> $GITHUB_STEP_SUMMARY
        echo "- Virtual Network (supporting infrastructure)" >> $GITHUB_STEP_SUMMARY
        echo "- Application Insights (sensitive data example)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### State Management:" >> $GITHUB_STEP_SUMMARY
        if [ "$BACKEND_TYPE" == "local" ]; then
          echo "- âœ… **Remote state backend configured and active**" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… State migrated from local to Azure Storage Account" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Future runs will use remote state automatically" >> $GITHUB_STEP_SUMMARY
        else
          echo "- âœ… **Using remote state backend (Azure Storage Account)**" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… State is shared and persistent across workflow runs" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… State locking and versioning enabled" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Learning Objectives:" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Understand Terraform state concepts" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Experience remote state backend in practice" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Practice configuration drift detection" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Experience state security best practices" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps for Drift Demo:" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to Azure Portal â†’ Resource Groups â†’ ${{ github.event.inputs.resource_group_name }}" >> $GITHUB_STEP_SUMMARY
        echo "2. Open Network Security Group: nsg-demo4-drift" >> $GITHUB_STEP_SUMMARY
        echo "3. Modify the security rules manually" >> $GITHUB_STEP_SUMMARY
        echo "4. Run this workflow again with 'plan' action to see drift detection" >> $GITHUB_STEP_SUMMARY
        echo "5. Run with 'deploy' action to fix the drift" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Remote State Configuration:" >> $GITHUB_STEP_SUMMARY
        terraform output -raw remote_state_setup_instructions | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Remember to destroy resources when done to avoid charges!**" >> $GITHUB_STEP_SUMMARY
